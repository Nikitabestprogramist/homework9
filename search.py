import redis
from models import Quote, Author
from bson import ObjectId


r = redis.Redis(host="localhost", port=6379, decode_responses=True)

HELP = """–ö–æ–º–∞–Ω–¥–∏:
  name:<—á–∞—Å—Ç–∏–Ω–∞_—ñ–º–µ–Ω—ñ>   ‚Äî —Ü–∏—Ç–∞—Ç–∏ –∞–≤—Ç–æ—Ä–∞
  tag:<—á–∞—Å—Ç–∏–Ω–∞_—Ç–µ–≥—É>     ‚Äî —Ü–∏—Ç–∞—Ç–∏ –¥–ª—è –æ–¥–Ω–æ–≥–æ —Ç–µ–≥—É
  tags:tag1,tag2         ‚Äî —Ü–∏—Ç–∞—Ç–∏, –¥–µ —î –•–û–ß–ê –ë –û–î–ò–ù —ñ–∑ —Ç–µ–≥—ñ–≤
  exit                   ‚Äî –≤–∏–π—Ç–∏
"""

print(HELP)

while True:
    cmd = input(">>> ").strip()
    if cmd == "exit":
        break
    if ":" not in cmd:
        print("–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ.")
        continue

    key, value = cmd.split(":", 1)
    cache_key = cmd


    if r.exists(cache_key):
        print("üü¢ –ö–µ—à:")
        print(r.get(cache_key))
        continue


    if key == "name":
        authors = Author.objects(fullname__istartswith=value)
        quotes  = Quote.objects(author__in=authors)
    elif key == "tag":
        quotes = Quote.objects(tags__istartswith=value)
    elif key == "tags":
        tag_list = value.split(",")
        quotes   = Quote.objects(tags__in=tag_list)
    else:
        print("–ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞")
        continue


    result = "\n".join(f"- {q.quote}" for q in quotes)
    print(result or "–ù—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")


    r.set(cache_key, result, ex=300)
